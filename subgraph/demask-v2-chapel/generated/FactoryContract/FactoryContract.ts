// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DmlTokenCreated extends ethereum.Event {
  get params(): DmlTokenCreated__Params {
    return new DmlTokenCreated__Params(this);
  }
}

export class DmlTokenCreated__Params {
  _event: DmlTokenCreated;

  constructor(event: DmlTokenCreated) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get erc(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nft(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get dmlToken(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get length(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FactoryContract extends ethereum.SmartContract {
  static bind(address: Address): FactoryContract {
    return new FactoryContract("FactoryContract", address);
  }

  allDmlTokens(param0: BigInt): Address {
    let result = super.call("allDmlTokens", "allDmlTokens(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_allDmlTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "allDmlTokens",
      "allDmlTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allDmlTokensLength(): BigInt {
    let result = super.call(
      "allDmlTokensLength",
      "allDmlTokensLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_allDmlTokensLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allDmlTokensLength",
      "allDmlTokensLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createDMLToken(
    creator: Address,
    token: Address,
    nft: Address,
    id: BigInt
  ): Address {
    let result = super.call(
      "createDMLToken",
      "createDMLToken(address,address,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(creator),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toAddress();
  }

  try_createDMLToken(
    creator: Address,
    token: Address,
    nft: Address,
    id: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createDMLToken",
      "createDMLToken(address,address,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(creator),
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dmlToken(param0: Address, param1: Address, param2: BigInt): Address {
    let result = super.call(
      "dmlToken",
      "dmlToken(address,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toAddress();
  }

  try_dmlToken(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "dmlToken",
      "dmlToken(address,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fee(): BigInt {
    let result = super.call("fee", "fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fee", "fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeTo(): Address {
    let result = super.call("feeTo", "feeTo():(address)", []);

    return result[0].toAddress();
  }

  try_feeTo(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeTo", "feeTo():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDmlToken(token: Address, nft: Address, id: BigInt): Address {
    let result = super.call(
      "getDmlToken",
      "getDmlToken(address,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toAddress();
  }

  try_getDmlToken(
    token: Address,
    nft: Address,
    id: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDmlToken",
      "getDmlToken(address,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _feeTo(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateDMLTokenCall extends ethereum.Call {
  get inputs(): CreateDMLTokenCall__Inputs {
    return new CreateDMLTokenCall__Inputs(this);
  }

  get outputs(): CreateDMLTokenCall__Outputs {
    return new CreateDMLTokenCall__Outputs(this);
  }
}

export class CreateDMLTokenCall__Inputs {
  _call: CreateDMLTokenCall;

  constructor(call: CreateDMLTokenCall) {
    this._call = call;
  }

  get creator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get nft(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateDMLTokenCall__Outputs {
  _call: CreateDMLTokenCall;

  constructor(call: CreateDMLTokenCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateFeeCall extends ethereum.Call {
  get inputs(): UpdateFeeCall__Inputs {
    return new UpdateFeeCall__Inputs(this);
  }

  get outputs(): UpdateFeeCall__Outputs {
    return new UpdateFeeCall__Outputs(this);
  }
}

export class UpdateFeeCall__Inputs {
  _call: UpdateFeeCall;

  constructor(call: UpdateFeeCall) {
    this._call = call;
  }

  get _fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateFeeCall__Outputs {
  _call: UpdateFeeCall;

  constructor(call: UpdateFeeCall) {
    this._call = call;
  }
}

export class UpdateFeeToCall extends ethereum.Call {
  get inputs(): UpdateFeeToCall__Inputs {
    return new UpdateFeeToCall__Inputs(this);
  }

  get outputs(): UpdateFeeToCall__Outputs {
    return new UpdateFeeToCall__Outputs(this);
  }
}

export class UpdateFeeToCall__Inputs {
  _call: UpdateFeeToCall;

  constructor(call: UpdateFeeToCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateFeeToCall__Outputs {
  _call: UpdateFeeToCall;

  constructor(call: UpdateFeeToCall) {
    this._call = call;
  }
}
