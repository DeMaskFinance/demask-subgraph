// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MakeLiquidity extends ethereum.Event {
  get params(): MakeLiquidity__Params {
    return new MakeLiquidity__Params(this);
  }
}

export class MakeLiquidity__Params {
  _event: MakeLiquidity;

  constructor(event: MakeLiquidity) {
    this._event = event;
  }

  get action(): string {
    return this._event.parameters[0].value.toString();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get dml(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get amounttoken(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amountnft(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get reserveToken(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get reserveNFT(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get blockTime(): BigInt {
    return this._event.parameters[10].value.toBigInt();
  }
}

export class MakeTransaction extends ethereum.Event {
  get params(): MakeTransaction__Params {
    return new MakeTransaction__Params(this);
  }
}

export class MakeTransaction__Params {
  _event: MakeTransaction;

  constructor(event: MakeTransaction) {
    this._event = event;
  }

  get action(): string {
    return this._event.parameters[0].value.toString();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get dml(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get amounttoken(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amountnft(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get reserveToken(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get reserveNFT(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get blockTime(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RouterContract__addLiquidityResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getAmountToken(): BigInt {
    return this.value0;
  }

  getAmountNFT(): BigInt {
    return this.value1;
  }

  getLiquidity(): BigInt {
    return this.value2;
  }
}

export class RouterContract__getAmountBuyResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountAFee(): BigInt {
    return this.value0;
  }

  getFeeBuy(): BigInt {
    return this.value1;
  }
}

export class RouterContract__getAmountSellResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountAFee(): BigInt {
    return this.value0;
  }

  getFeeSell(): BigInt {
    return this.value1;
  }
}

export class RouterContract__removeLiquidityResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmounttoken(): BigInt {
    return this.value0;
  }

  getAmountnft(): BigInt {
    return this.value1;
  }
}

export class RouterContract__removeLiquidityETHResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountETH(): BigInt {
    return this.value0;
  }

  getAmountnft(): BigInt {
    return this.value1;
  }
}

export class RouterContract extends ethereum.SmartContract {
  static bind(address: Address): RouterContract {
    return new RouterContract("RouterContract", address);
  }

  WETH(): Address {
    let result = super.call("WETH", "WETH():(address)", []);

    return result[0].toAddress();
  }

  try_WETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH", "WETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  addLiquidity(
    token: Address,
    nft: Address,
    id: BigInt,
    amountTokenDesired: BigInt,
    amountNFTDesired: BigInt,
    amountTokenMin: BigInt,
    to: Address,
    deadline: BigInt
  ): RouterContract__addLiquidityResult {
    let result = super.call(
      "addLiquidity",
      "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(amountTokenDesired),
        ethereum.Value.fromUnsignedBigInt(amountNFTDesired),
        ethereum.Value.fromUnsignedBigInt(amountTokenMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return new RouterContract__addLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_addLiquidity(
    token: Address,
    nft: Address,
    id: BigInt,
    amountTokenDesired: BigInt,
    amountNFTDesired: BigInt,
    amountTokenMin: BigInt,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<RouterContract__addLiquidityResult> {
    let result = super.tryCall(
      "addLiquidity",
      "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(amountTokenDesired),
        ethereum.Value.fromUnsignedBigInt(amountNFTDesired),
        ethereum.Value.fromUnsignedBigInt(amountTokenMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RouterContract__addLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  buy(
    token: Address,
    nft: Address,
    id: BigInt,
    amountNFT: BigInt,
    amountInMax: BigInt,
    to: Address,
    deadline: BigInt
  ): BigInt {
    let result = super.call(
      "buy",
      "buy(address,address,uint256,uint256,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(amountNFT),
        ethereum.Value.fromUnsignedBigInt(amountInMax),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBigInt();
  }

  try_buy(
    token: Address,
    nft: Address,
    id: BigInt,
    amountNFT: BigInt,
    amountInMax: BigInt,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buy",
      "buy(address,address,uint256,uint256,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(amountNFT),
        ethereum.Value.fromUnsignedBigInt(amountInMax),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  creator(): Address {
    let result = super.call("creator", "creator():(address)", []);

    return result[0].toAddress();
  }

  try_creator(): ethereum.CallResult<Address> {
    let result = super.tryCall("creator", "creator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAmountBuy(
    token: Address,
    nft: Address,
    id: BigInt,
    amountNFT: BigInt
  ): RouterContract__getAmountBuyResult {
    let result = super.call(
      "getAmountBuy",
      "getAmountBuy(address,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(amountNFT)
      ]
    );

    return new RouterContract__getAmountBuyResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getAmountBuy(
    token: Address,
    nft: Address,
    id: BigInt,
    amountNFT: BigInt
  ): ethereum.CallResult<RouterContract__getAmountBuyResult> {
    let result = super.tryCall(
      "getAmountBuy",
      "getAmountBuy(address,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(amountNFT)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RouterContract__getAmountBuyResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getAmountSell(
    token: Address,
    nft: Address,
    id: BigInt,
    amountNFT: BigInt
  ): RouterContract__getAmountSellResult {
    let result = super.call(
      "getAmountSell",
      "getAmountSell(address,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(amountNFT)
      ]
    );

    return new RouterContract__getAmountSellResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getAmountSell(
    token: Address,
    nft: Address,
    id: BigInt,
    amountNFT: BigInt
  ): ethereum.CallResult<RouterContract__getAmountSellResult> {
    let result = super.tryCall(
      "getAmountSell",
      "getAmountSell(address,address,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(amountNFT)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RouterContract__getAmountSellResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getReferral(): Address {
    let result = super.call("getReferral", "getReferral():(address)", []);

    return result[0].toAddress();
  }

  try_getReferral(): ethereum.CallResult<Address> {
    let result = super.tryCall("getReferral", "getReferral():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  launchpadAddLiquidity(
    token: Address,
    nft: Address,
    id: BigInt,
    amountTokenDesired: BigInt,
    amountNFTDesired: BigInt,
    amountTokenMin: BigInt,
    to: Address,
    deadline: BigInt
  ): Address {
    let result = super.call(
      "launchpadAddLiquidity",
      "launchpadAddLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(amountTokenDesired),
        ethereum.Value.fromUnsignedBigInt(amountNFTDesired),
        ethereum.Value.fromUnsignedBigInt(amountTokenMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toAddress();
  }

  try_launchpadAddLiquidity(
    token: Address,
    nft: Address,
    id: BigInt,
    amountTokenDesired: BigInt,
    amountNFTDesired: BigInt,
    amountTokenMin: BigInt,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "launchpadAddLiquidity",
      "launchpadAddLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(amountTokenDesired),
        ethereum.Value.fromUnsignedBigInt(amountNFTDesired),
        ethereum.Value.fromUnsignedBigInt(amountTokenMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  referral(): Address {
    let result = super.call("referral", "referral():(address)", []);

    return result[0].toAddress();
  }

  try_referral(): ethereum.CallResult<Address> {
    let result = super.tryCall("referral", "referral():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  removeLiquidity(
    token: Address,
    nft: Address,
    id: BigInt,
    liquidity: BigInt,
    amountTokenMin: BigInt,
    amountNFTMin: BigInt,
    to: Address,
    deadline: BigInt
  ): RouterContract__removeLiquidityResult {
    let result = super.call(
      "removeLiquidity",
      "removeLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountTokenMin),
        ethereum.Value.fromUnsignedBigInt(amountNFTMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return new RouterContract__removeLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_removeLiquidity(
    token: Address,
    nft: Address,
    id: BigInt,
    liquidity: BigInt,
    amountTokenMin: BigInt,
    amountNFTMin: BigInt,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<RouterContract__removeLiquidityResult> {
    let result = super.tryCall(
      "removeLiquidity",
      "removeLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountTokenMin),
        ethereum.Value.fromUnsignedBigInt(amountNFTMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RouterContract__removeLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  removeLiquidityETH(
    nft: Address,
    id: BigInt,
    liquidity: BigInt,
    amountETHMin: BigInt,
    amountNFTMin: BigInt,
    to: Address,
    deadline: BigInt
  ): RouterContract__removeLiquidityETHResult {
    let result = super.call(
      "removeLiquidityETH",
      "removeLiquidityETH(address,uint256,uint256,uint256,uint256,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountETHMin),
        ethereum.Value.fromUnsignedBigInt(amountNFTMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return new RouterContract__removeLiquidityETHResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_removeLiquidityETH(
    nft: Address,
    id: BigInt,
    liquidity: BigInt,
    amountETHMin: BigInt,
    amountNFTMin: BigInt,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<RouterContract__removeLiquidityETHResult> {
    let result = super.tryCall(
      "removeLiquidityETH",
      "removeLiquidityETH(address,uint256,uint256,uint256,uint256,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(amountETHMin),
        ethereum.Value.fromUnsignedBigInt(amountNFTMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RouterContract__removeLiquidityETHResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  sell(
    token: Address,
    nft: Address,
    id: BigInt,
    amountNFT: BigInt,
    amountOutMin: BigInt,
    to: Address,
    deadline: BigInt
  ): BigInt {
    let result = super.call(
      "sell",
      "sell(address,address,uint256,uint256,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(amountNFT),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBigInt();
  }

  try_sell(
    token: Address,
    nft: Address,
    id: BigInt,
    amountNFT: BigInt,
    amountOutMin: BigInt,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sell",
      "sell(address,address,uint256,uint256,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(amountNFT),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sellETH(
    nft: Address,
    id: BigInt,
    amountNFT: BigInt,
    amountOutMin: BigInt,
    to: Address,
    deadline: BigInt
  ): BigInt {
    let result = super.call(
      "sellETH",
      "sellETH(address,uint256,uint256,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(amountNFT),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );

    return result[0].toBigInt();
  }

  try_sellETH(
    nft: Address,
    id: BigInt,
    amountNFT: BigInt,
    amountOutMin: BigInt,
    to: Address,
    deadline: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sellETH",
      "sellETH(address,uint256,uint256,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(nft),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(amountNFT),
        ethereum.Value.fromUnsignedBigInt(amountOutMin),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(deadline)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _referral(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _WETH(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _creator(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nft(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountTokenDesired(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountNFTDesired(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get amountTokenMin(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get amountToken(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountNFT(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class AddLiquidityETHCall extends ethereum.Call {
  get inputs(): AddLiquidityETHCall__Inputs {
    return new AddLiquidityETHCall__Inputs(this);
  }

  get outputs(): AddLiquidityETHCall__Outputs {
    return new AddLiquidityETHCall__Outputs(this);
  }
}

export class AddLiquidityETHCall__Inputs {
  _call: AddLiquidityETHCall;

  constructor(call: AddLiquidityETHCall) {
    this._call = call;
  }

  get nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountNFTDesired(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountETHMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class AddLiquidityETHCall__Outputs {
  _call: AddLiquidityETHCall;

  constructor(call: AddLiquidityETHCall) {
    this._call = call;
  }

  get amountETH(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountNFT(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class BuyCall extends ethereum.Call {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nft(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountNFT(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountInMax(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BuyETHCall extends ethereum.Call {
  get inputs(): BuyETHCall__Inputs {
    return new BuyETHCall__Inputs(this);
  }

  get outputs(): BuyETHCall__Outputs {
    return new BuyETHCall__Outputs(this);
  }
}

export class BuyETHCall__Inputs {
  _call: BuyETHCall;

  constructor(call: BuyETHCall) {
    this._call = call;
  }

  get nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountNFT(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class BuyETHCall__Outputs {
  _call: BuyETHCall;

  constructor(call: BuyETHCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LaunchpadAddLiquidityCall extends ethereum.Call {
  get inputs(): LaunchpadAddLiquidityCall__Inputs {
    return new LaunchpadAddLiquidityCall__Inputs(this);
  }

  get outputs(): LaunchpadAddLiquidityCall__Outputs {
    return new LaunchpadAddLiquidityCall__Outputs(this);
  }
}

export class LaunchpadAddLiquidityCall__Inputs {
  _call: LaunchpadAddLiquidityCall;

  constructor(call: LaunchpadAddLiquidityCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nft(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountTokenDesired(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountNFTDesired(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get amountTokenMin(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class LaunchpadAddLiquidityCall__Outputs {
  _call: LaunchpadAddLiquidityCall;

  constructor(call: LaunchpadAddLiquidityCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nft(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountTokenMin(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get amountNFTMin(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get amounttoken(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountnft(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RemoveLiquidityETHCall extends ethereum.Call {
  get inputs(): RemoveLiquidityETHCall__Inputs {
    return new RemoveLiquidityETHCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityETHCall__Outputs {
    return new RemoveLiquidityETHCall__Outputs(this);
  }
}

export class RemoveLiquidityETHCall__Inputs {
  _call: RemoveLiquidityETHCall;

  constructor(call: RemoveLiquidityETHCall) {
    this._call = call;
  }

  get nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountETHMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountNFTMin(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class RemoveLiquidityETHCall__Outputs {
  _call: RemoveLiquidityETHCall;

  constructor(call: RemoveLiquidityETHCall) {
    this._call = call;
  }

  get amountETH(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountnft(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SellCall extends ethereum.Call {
  get inputs(): SellCall__Inputs {
    return new SellCall__Inputs(this);
  }

  get outputs(): SellCall__Outputs {
    return new SellCall__Outputs(this);
  }
}

export class SellCall__Inputs {
  _call: SellCall;

  constructor(call: SellCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nft(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountNFT(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class SellCall__Outputs {
  _call: SellCall;

  constructor(call: SellCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SellETHCall extends ethereum.Call {
  get inputs(): SellETHCall__Inputs {
    return new SellETHCall__Inputs(this);
  }

  get outputs(): SellETHCall__Outputs {
    return new SellETHCall__Outputs(this);
  }
}

export class SellETHCall__Inputs {
  _call: SellETHCall;

  constructor(call: SellETHCall) {
    this._call = call;
  }

  get nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountNFT(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class SellETHCall__Outputs {
  _call: SellETHCall;

  constructor(call: SellETHCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
