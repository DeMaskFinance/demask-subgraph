// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Referee extends ethereum.Event {
  get params(): Referee__Params {
    return new Referee__Params(this);
  }
}

export class Referee__Params {
  _event: Referee;

  constructor(event: Referee) {
    this._event = event;
  }

  get sponsor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get blockTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateCharity extends ethereum.Event {
  get params(): UpdateCharity__Params {
    return new UpdateCharity__Params(this);
  }
}

export class UpdateCharity__Params {
  _event: UpdateCharity;

  constructor(event: UpdateCharity) {
    this._event = event;
  }

  get charity(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get blockTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateFee extends ethereum.Event {
  get params(): UpdateFee__Params {
    return new UpdateFee__Params(this);
  }
}

export class UpdateFee__Params {
  _event: UpdateFee;

  constructor(event: UpdateFee) {
    this._event = event;
  }

  get fee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get blockTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ReferralContract extends ethereum.SmartContract {
  static bind(address: Address): ReferralContract {
    return new ReferralContract("ReferralContract", address);
  }

  getCharity(): Address {
    let result = super.call("getCharity", "getCharity():(address)", []);

    return result[0].toAddress();
  }

  try_getCharity(): ethereum.CallResult<Address> {
    let result = super.tryCall("getCharity", "getCharity():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFee(): BigInt {
    let result = super.call("getFee", "getFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getFee", "getFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReceiver(user: Address): Address {
    let result = super.call("getReceiver", "getReceiver(address):(address)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toAddress();
  }

  try_getReceiver(user: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getReceiver",
      "getReceiver(address):(address)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRef(user: Address): Array<Address> {
    let result = super.call("getRef", "getRef(address):(address[])", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toAddressArray();
  }

  try_getRef(user: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getRef", "getRef(address):(address[])", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getSponsor(user: Address): Address {
    let result = super.call("getSponsor", "getSponsor(address):(address)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toAddress();
  }

  try_getSponsor(user: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("getSponsor", "getSponsor(address):(address)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ref(param0: Address, param1: BigInt): Address {
    let result = super.call("ref", "ref(address,uint256):(address)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toAddress();
  }

  try_ref(param0: Address, param1: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ref", "ref(address,uint256):(address)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sponsor(param0: Address): Address {
    let result = super.call("sponsor", "sponsor(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_sponsor(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("sponsor", "sponsor(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _charity(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangeCharityCall extends ethereum.Call {
  get inputs(): ChangeCharityCall__Inputs {
    return new ChangeCharityCall__Inputs(this);
  }

  get outputs(): ChangeCharityCall__Outputs {
    return new ChangeCharityCall__Outputs(this);
  }
}

export class ChangeCharityCall__Inputs {
  _call: ChangeCharityCall;

  constructor(call: ChangeCharityCall) {
    this._call = call;
  }

  get _charity(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeCharityCall__Outputs {
  _call: ChangeCharityCall;

  constructor(call: ChangeCharityCall) {
    this._call = call;
  }
}

export class ChangeFeeCall extends ethereum.Call {
  get inputs(): ChangeFeeCall__Inputs {
    return new ChangeFeeCall__Inputs(this);
  }

  get outputs(): ChangeFeeCall__Outputs {
    return new ChangeFeeCall__Outputs(this);
  }
}

export class ChangeFeeCall__Inputs {
  _call: ChangeFeeCall;

  constructor(call: ChangeFeeCall) {
    this._call = call;
  }

  get _fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeFeeCall__Outputs {
  _call: ChangeFeeCall;

  constructor(call: ChangeFeeCall) {
    this._call = call;
  }
}

export class RefereeCall extends ethereum.Call {
  get inputs(): RefereeCall__Inputs {
    return new RefereeCall__Inputs(this);
  }

  get outputs(): RefereeCall__Outputs {
    return new RefereeCall__Outputs(this);
  }
}

export class RefereeCall__Inputs {
  _call: RefereeCall;

  constructor(call: RefereeCall) {
    this._call = call;
  }

  get _sponsor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RefereeCall__Outputs {
  _call: RefereeCall;

  constructor(call: RefereeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
